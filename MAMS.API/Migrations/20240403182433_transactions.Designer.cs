// <auto-generated />
using System;
using MAMS.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAMS.API.Migrations
{
    [DbContext(typeof(ApiDataContext))]
    [Migration("20240403182433_transactions")]
    partial class transactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAMS.API.Models.Appoinments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Appoinment_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_PersonalId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("User_PersonalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailsId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("Appoinments");
                });

            modelBuilder.Entity("MAMS.API.Models.DoctorAvailableDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Available_Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Available_Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAvailableDetails");
                });

            modelBuilder.Entity("MAMS.API.Models.DoctorDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Auth_Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Blood_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Affiliation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCouncilRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middle_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modified_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalId_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personal_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuserId")
                        .HasColumnType("int");

                    b.Property<string>("UserTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuserId")
                        .IsUnique();

                    b.ToTable("DoctorDetails");
                });

            modelBuilder.Entity("MAMS.API.Models.MedicalRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Appointment_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_PersonalId")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment_plan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("User_PersonalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailsId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MAMS.API.Models.Specializations", b =>
                {
                    b.Property<int>("Specializations_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Specializations_Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Record_Status")
                        .HasColumnType("int");

                    b.Property<string>("Specializations_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Specializations_Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("MAMS.API.Models.Suser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Susers");
                });

            modelBuilder.Entity("MAMS.API.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("UserDetailsId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MAMS.API.Models.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Blood_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middle_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modified_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalId_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personal_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuserId")
                        .HasColumnType("int");

                    b.Property<string>("UserTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuserId")
                        .IsUnique();

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("MAMS.API.Models.Appoinments", b =>
                {
                    b.HasOne("MAMS.API.Models.DoctorDetails", null)
                        .WithMany("Appoinments")
                        .HasForeignKey("DoctorDetailsId");

                    b.HasOne("MAMS.API.Models.UserDetails", null)
                        .WithMany("Appoinments")
                        .HasForeignKey("UserDetailsId");
                });

            modelBuilder.Entity("MAMS.API.Models.DoctorAvailableDetails", b =>
                {
                    b.HasOne("MAMS.API.Models.DoctorDetails", "DoctorDetails")
                        .WithMany("DoctorAvailableDetails")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorDetails");
                });

            modelBuilder.Entity("MAMS.API.Models.DoctorDetails", b =>
                {
                    b.HasOne("MAMS.API.Models.Suser", "Suser")
                        .WithOne("DoctorDetails")
                        .HasForeignKey("MAMS.API.Models.DoctorDetails", "SuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suser");
                });

            modelBuilder.Entity("MAMS.API.Models.MedicalRecords", b =>
                {
                    b.HasOne("MAMS.API.Models.DoctorDetails", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorDetailsId");

                    b.HasOne("MAMS.API.Models.UserDetails", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("UserDetailsId");
                });

            modelBuilder.Entity("MAMS.API.Models.Transactions", b =>
                {
                    b.HasOne("MAMS.API.Models.Appoinments", "appoinments")
                        .WithOne("Transactions")
                        .HasForeignKey("MAMS.API.Models.Transactions", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAMS.API.Models.UserDetails", "UserDetails")
                        .WithOne("Transactions")
                        .HasForeignKey("MAMS.API.Models.Transactions", "UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetails");

                    b.Navigation("appoinments");
                });

            modelBuilder.Entity("MAMS.API.Models.UserDetails", b =>
                {
                    b.HasOne("MAMS.API.Models.Suser", "Suser")
                        .WithOne("UserDetails")
                        .HasForeignKey("MAMS.API.Models.UserDetails", "SuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suser");
                });

            modelBuilder.Entity("MAMS.API.Models.Appoinments", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MAMS.API.Models.DoctorDetails", b =>
                {
                    b.Navigation("Appoinments");

                    b.Navigation("DoctorAvailableDetails");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("MAMS.API.Models.Suser", b =>
                {
                    b.Navigation("DoctorDetails")
                        .IsRequired();

                    b.Navigation("UserDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("MAMS.API.Models.UserDetails", b =>
                {
                    b.Navigation("Appoinments");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
