@using MAMS.Services
@using MAMS.Models.ViewModels
@{
    ViewData["Title"] = "Sign Up";

    Layout = null;
}
@model SignUpViewModel

@using static MAMS.Services.Enums

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel="stylesheet" href="~/css/login.css">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/bootstrap-icons-1.11.1/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/MAMS.styles.css" asp-append-version="true" />

    <style>
        /* Define a CSS class for bold labels */
        .label {
            font-weight: bold;
            color: #336699; /* Change this color code to the color you prefer */
        }
        /* Change input text color to blue */
        input[type="text"], input[type="email"] {
            color: blue;
        }

        /* Change select box text color */
        select {
            color: blue; /* Change the text color of the select box */
        }

            /* Change the text color of selected option in the select box */
            select option:checked {
                color: red; /* Change the text color of the selected option */
            }
    </style>

</head>
<body>
    <div class="container">
        <div class="split left-s px-4">
                <figure>
                    <blockquote class="h2">
                        <p>Sign Up</p>
                    </blockquote>
                    <figcaption class="blockquote-footer">
                        Get Registered with the<cite title="Source Title">MedEase&#8482;</cite>
                    </figcaption>
                    <hr />
                </figure>

            <div>
                <form asp-controller="Login" asp-action="Register" method="post" id="signinForm" novalidate>
                    <div>
                        <div class="card card-primary card-outline p-3 mt-4">
                            <div class="card-header h6">
                                Personal Details :
                            </div>
                            <div class="card-body">
                                <div class="row gy-1">
                                    <div class="col-2 mb-4">
                                        <label asp-for="UserTitle" class="form-label">Title:</label>
                                        <select asp-for="UserTitle" class="form-select rounded-pill">
                                            <option value="">--Title--</option>
                                            @foreach (var uTitle in Enum.GetValues(typeof(UserTitleType)))
                                            {
                                                <option value="@uTitle">@uTitle</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="First_Name" class="form-label">First Name:</label>
                                        <input asp-for="First_Name" class="form-control rounded-pill" required />
                                        <span asp-validation-for="First_Name" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="Last_Name" class="form-label">Last Name:</label>
                                        <input asp-for="Last_Name" class="form-control rounded-pill" required />
                                        <span asp-validation-for="Last_Name" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="Middle_Name" class="form-label">Middle Name:</label>
                                        <input asp-for="Middle_Name" class="form-control rounded-pill" placeholder="Optional" />
                                        <span asp-validation-for="Middle_Name" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="mb-4">
                                        <label asp-for="Address" class="form-label">Address:</label>
                                        <input asp-for="Address" class="form-control rounded-pill" />
                                        <span asp-validation-for="Address" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="col mb-4">
                                        <label asp-for="City" class="form-label">City:</label>
                                        <input asp-for="City" class="form-control rounded-pill" />
                                        <span asp-validation-for="City" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="District" class="form-label">District:</label>
                                        <select asp-for="District" class="form-select rounded-pill">
                                            <option value="">--Select Your District--</option>
                                            @foreach (var district in Enum.GetValues(typeof(District)))
                                            {
                                                <option value="@district">@district</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="Province" class="form-label">Province:</label>
                                        <select asp-for="Province" class="form-select rounded-pill">
                                            <option value="">--Select Your Province--</option>
                                            @foreach (var province in Enum.GetValues(typeof(Province)))
                                            {
                                                <option value="@province">@province</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="col mb-4">
                                        <label asp-for="Email" class="form-label">Email:</label>
                                        <input asp-for="Email" class="form-control rounded-pill" type="email" />
                                        <span asp-validation-for="Email" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="PhoneNumber" class="form-label">Phone:</label>
                                        <input asp-for="PhoneNumber" class="form-control rounded-pill" type="tel" oninput="validatePhoneNumber(this)" required />
                                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="col mb-4">
                                        <label asp-for="Birth_Date" class="form-label">Birth Date:</label>
                                        <input asp-for="Birth_Date" class="form-control rounded-pill" type="date" asp-format="{0:yyyy-MM-dd}" />
                                        <span asp-validation-for="Birth_Date" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label class="form-label">Blood Group:</label>
                                        <select asp-for="Blood_Type" class="form-select rounded-pill" required>
                                            <option value="">--Select your Blood Group--</option>
                                            @foreach (var bloodGroup in Enum.GetValues(typeof(BloodGroupType)))
                                            {
                                                <option value="@bloodGroup">@GetBloodGroupDisplayName((BloodGroupType)bloodGroup)</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="Gender" class="form-label">Gender:</label>
                                        <select asp-for="Gender" id="SuserDetails.Gender" class="form-select rounded-pill">
                                            <option value="">-- Select your Gender --</option>
                                            @foreach (var gType in Enum.GetValues(typeof(GenderType)))
                                            {
                                                <option value="@gType">@gType</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="col mb-4">
                                        <label asp-for="PersonalId_Type" class="form-label">Personal Id:</label>
                                        <select asp-for="PersonalId_Type" id="idTypeSelect" class="form-select rounded-pill">
                                            <option value="">-- Select Personal ID Type --</option>
                                            @foreach (var idType in Enum.GetValues(typeof(PersonalIdType)))
                                            {
                                                <option value="@idType">@idType</option>
                                            }
                                        </select>
                                    </div>
                                    <div class=" col mb-4 nic-validate" id="nic-input" data-type="Nic" style="display: none;" placeholder="Enter NIC number">
                                        <label asp-for="Personal_Id" class="form-label">NIC:</label>
                                        <input asp-for="Personal_Id" class="form-control rounded-pill" />
                                        <span asp-validation-for="Personal_Id" class="text-danger" id="nic-validation-msg"></span>
                                    </div>
                                    <div class="col mb-4" id="passport-input" data-type="Passport" style="display: none;">
                                        <label asp-for="Personal_Id" class="form-label">Passport:</label>
                                        <input asp-for="Personal_Id" class="form-control rounded-pill" />
                                        <span asp-validation-for="Personal_Id" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4" id="dlicence-input" data-type="DLicence" style="display: none;">
                                        <label asp-for="Personal_Id" class="form-label">Driving licence Id:</label>
                                        <input asp-for="Personal_Id" class="form-control rounded-pill" />
                                        <span asp-validation-for="Personal_Id" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />

                        <div class="card card-primary card-outline p-3 mt-4">
                            <div class="card-header h6">
                                Login Details :
                            </div>
                            <div class="card-body">
                                <div class="row gy-3">
                                    <div class="col mb-4">
                                        <label asp-for="RoleId" class="form-label">Register As*:</label>
                                        <select asp-for="RoleId" id="roleTypeSelect" class="form-select rounded-pill">
                                            <option value="20">Patient</option>
                                            <option value="30">Doctor</option>
                                        </select>
                                    </div>

                                    <div class="col mb-4" id="dTypeInput">
                                        <label asp-for="Specialization" style="color:#d63384" class="form-label">Specialization:</label>
                                        <select asp-for="Specialization" class="form-select rounded-pill">
                                            <option value="">--Select Specialization--</option>
                                            @foreach (var specializations in ViewBag.Specializaions)
                                            {
                                                <option value="@specializations.Specializations_Name">@specializations.Specializations_Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="row gy-1">
                                    <div class="col mb-4">
                                        <label asp-for="UserName" class="form-label">Provide User Name:</label>
                                        <input asp-for="UserName" class="form-control rounded-pill" required />
                                        <span asp-validation-for="UserName" class="text-danger"></span>
                                    </div>
                                    <div class="col mb-4">
                                        <label asp-for="Password" class="form-label">Provide Password:</label>
                                        <input asp-for="Password" class="form-control rounded-pill" type="password" id="password" required />
                                        <span asp-validation-for="Password" class="text-danger"></span>

                                        <div class="p-2">
                                            <div class="progress" id="password-strength-meter">
                                                <div class="progress-bar" role="progressbar" style="width: 0%;" id="strength-bar"></div>
                                            </div>
                                            <span id="strength-text"></span>
                                        </div>
                                    </div>
                                    <div class="col mb-4">
                                        <label class="form-label">Re-enter Password:</label>
                                        <input class="form-control rounded-pill" type="password" id="confirmPwd" required>
                                        <span id="passwordMatchError" class="text-danger" style="display: none;">Passwords do not match</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />

                        <div class="row gy-1">
                            <hr />
                            <div class="col mb-4">
                                <a asp-controller="Login" asp-action="Login" class="btn btn-outline-secondary rounded-pill">Log In &nbsp; <i class="bi bi-box-arrow-in-left"></i></a>
                                Back to login
                            </div>

                            <div class="col mb-4 text-end">
                                <button id="signinButton" type="submit" class="btn btn-primary rounded-pill" onclick=showConfirmationModal()>Register &nbsp; <i class="bi bi-box-arrow-in-up-right"></i></button>
                            </div>
                        </div>

                    </div>
                </form>

            </div>
            <footer class="border-top footer text-muted text-center">
                <div class="container">
                    &copy; 2024 - MAMS v2017.01.17.01-
                </div>
            </footer>
        </div>
        <div class="split right-r"></div>
    </div>

    <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    Are you sure you want to Register with this Details?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    <button type="button" class="btn btn-warning" id="confirmYes">Yes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await Component.InvokeAsync("Notyf")

    <script>

        // Get the elements
        var roleTypeSelect = document.getElementById("roleTypeSelect");
        var dTypeInput = document.getElementById("dTypeInput");
        console.log(dTypeInput.value);

        // Initial setup
        toggleSpecializationField();

        // Attach an event listener to the "Register As" dropdown
        roleTypeSelect.addEventListener("change", function () {
            toggleSpecializationField();
        });

        // Function to toggle the visibility of the "Specialization" field
        function toggleSpecializationField() {
            var selectedRole = roleTypeSelect.value;
            if (selectedRole === "30") { // Show the "Specialization" field for Doctor
                dTypeInput.style.display = "block";
            } else {
                dTypeInput.style.display = "none";
            }
        }

        //phoneNumber and Email Validation
        function validatePhoneNumber(input) {
            var phoneNumber = input.value.trim();
            var spanElement = input.nextElementSibling; // Get the next element, which is the <span> for validation

            // Regular expression pattern for Sri Lankan phone number (supports various formats)
            var phonePattern = /^(?:\+?94|0)(?:7\d|2\d)(?:\d{7}|\d{8}|\d{9})$/;

            if (phonePattern.test(phoneNumber)) {
                // Valid phone number format
                input.setCustomValidity('');
                spanElement.textContent = ''; // Clear any previous validation message
            }
            else {
                // Invalid phone number format
                input.setCustomValidity('Please enter a valid Sri Lankan phone number');
                spanElement.textContent = 'Please enter a valid Sri Lankan phone number'; // Show error message in the <span>
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            var emailInput = document.querySelector('input[type="email"]');
            var emailSpan = document.querySelector('[data-valmsg-for="Email"]');

            emailInput.addEventListener('input', function (event) {
                var email = event.target.value.trim();

                // Regular expression pattern for email validation
                var emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

                if (!emailPattern.test(email)) {
                    emailSpan.textContent = 'Please enter a valid email address';
                }
                else {
                    emailSpan.textContent = '';
                }
            });
        });

        @functions {
            // Helper method to get display name for blood group
            public string GetBloodGroupDisplayName(BloodGroupType bloodGroup)
            {
                switch (bloodGroup)
                {
                    case BloodGroupType.A_Positive:
                        return "A+";
                    case BloodGroupType.A_Negative:
                        return "A-";
                    case BloodGroupType.B_Positive:
                        return "B+";
                    case BloodGroupType.B_Negative:
                        return "B-";
                    case BloodGroupType.AB_Positive:
                        return "AB+";
                    case BloodGroupType.AB_Negative:
                        return "AB-";
                    case BloodGroupType.O_Positive:
                        return "O+";
                    case BloodGroupType.O_Negative:
                        return "O-";
                    default:
                        return string.Empty;
                }
            }
        }

            // Function to show the relevant input field based on the selected Personal ID Type
            function showPersonalIdInput() {
                var idTypeSelect = document.getElementById("idTypeSelect");
                console.log(idTypeSelect.value);
                var nicInput = document.getElementById("nic-input");
                var passportInput = document.getElementById("passport-input");
                var dlicenceInput = document.getElementById("dlicence-input");

                // Hide all input fields initially
                nicInput.style.display = "none";
                passportInput.style.display = "none";
                dlicenceInput.style.display = "none";

                // Show the relevant input field based on the selected type
                if (idTypeSelect.value === "NIC") {
                    nicInput.style.display = "block";
                } else if (idTypeSelect.value === "Passport") {
                    passportInput.style.display = "block";
                    document.getElementById("Personal_Id").setAttribute("data-type", "NIC");
                } else if (idTypeSelect.value === "DLicence") {
                    dlicenceInput.style.display = "block";
                    document.getElementById("Personal_Id").setAttribute("data-type", "NIC");
                }
            }

        // Attach event listener to trigger NIC validation
        var nicInput = document.getElementById("Personal_Id");
        nicInput.addEventListener("blur", function () {
            validateNIC();
        });

        // Attach event listener to trigger the display of the relevant input field
        var idTypeSelect = document.getElementById("idTypeSelect");
        idTypeSelect.addEventListener("change", function () {
            showPersonalIdInput();
        });

        // Initial setup
        showPersonalIdInput();

        // Function to validate NIC
        function validateNIC() {
            var nicInput = document.getElementById("Personal_Id");
            var nicValidationMsg = document.getElementById("nic-validation-msg");
            var birthYearInput = document.getElementById("Birth_Date");
            var genderInput = document.getElementById("Gender");
            console.log(birthYearInput.value.split("-")[0])
            console.log(genderInput.value);
            // Regular expression pattern for NIC validation
            var nicPattern = /^\d{9}[VXvx]$/; // Old NIC pattern
            var newNicPattern = /^\d{12}$/; // New NIC pattern

            var nicNumber = nicInput.value.trim();
            var middleNumberAsNumber = parseInt(nicNumber.substring(2, 5), 10);
            var middleNumberAsNumberNew = parseInt(nicNumber.substring(4, 7), 10);
            var femaleNum = middleNumberAsNumber + 500;
            var femaleNumNew = middleNumberAsNumberNew + 500;
            console.log("Middle Number:", middleNumberAsNumber);
            console.log("Middle Number New:", middleNumberAsNumberNew);
            console.log("Female Number:", femaleNum);
            console.log("Female Number New:", femaleNumNew);


            var gender;

            // Get the birth year
            var ubirthYear = birthYearInput.value.split("-")[0];
            var day = new Date(birthYearInput.value);
            // Calculate the count of days from January 1st of the birth year to the birthday
            var jan1st = new Date(ubirthYear, 0, 1);
            var daysUntilBirthday = Math.ceil((day - jan1st) / (1000 * 60 * 60 * 24));
            console.log("Days until birthday:", daysUntilBirthday);

            if (middleNumberAsNumber > 500 || middleNumberAsNumberNew > 500) {
                gender = "Female";
                return gender;
            } else {
                gender = "Male";
                return gender;
            }

            console.log(gender);

            if (nicPattern.test(nicNumber)) {
                var birthYear = "19" + nicNumber.substring(0, 2);
                var lastChar = nicNumber.charAt(9);
                nicValidationMsg.textContent = ``;

                // Check if birth year from NIC matches user-entered birth year
                if (birthYear !== birthYearInput.value.split("-")[0] || gender !== genderInput.value) {
                    nicValidationMsg.textContent += `\n NIC Mismatched with the BirthDate and Gender!`;
                }
            } else if (newNicPattern.test(nicNumber)) {
                var birthYearNew = nicNumber.substring(0, 4);
                nicValidationMsg.textContent = ``;

                // Check if birth year from NIC matches user-entered birth year
                if (birthYearNew !== birthYearInput.value.split("-")[0] || middleNumberAsNumberNew !== daysUntilBirthday || gender !== genderInput.value) {
                    nicValidationMsg.textContent += `\nNIC Mismatched with the BirthDate and Gender!`;
                }
            } else {
                nicValidationMsg.textContent = 'Invalid NIC number';
            }
        }

        // Call the function when the DOM is loaded
        document.addEventListener('DOMContentLoaded', function () {
            const changeText = function (el, text, color) {
                el.textContent = text;
                el.style.color = color;
            };

            document.getElementById('password').addEventListener('keyup', function () {
                var password = this.value;
                var strengthMeter = document.getElementById('strength-bar');
                var strengthText = document.getElementById('strength-text');

                var strength = 0;
                if (password.length >= 8) {
                    strength += 20;
                }
                if (password.match(/[a-z]+/)) {
                    strength += 20;
                }
                if (password.match(/[A-Z]+/)) {
                    strength += 20;
                }
                if (password.match(/[0-9]+/)) {
                    strength += 20;
                }
                if (password.match(/[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/)) {
                    strength += 20;
                }

                strengthMeter.style.width = strength + '%';

                if (strength <= 40) {
                    changeText(strengthText, 'Weak', 'red');
                    strengthMeter.className = 'progress-bar bg-danger'; // Add a class to style weak progress bar in Bootstrap
                } else if (strength <= 80) {
                    changeText(strengthText, 'Moderate', 'orange');
                    strengthMeter.className = 'progress-bar bg-warning'; // Add a class to style moderate progress bar in Bootstrap
                } else {
                    changeText(strengthText, 'Strong', 'green');
                    strengthMeter.className = 'progress-bar bg-success'; // Add a class to style strong progress bar in Bootstrap
                }
            });

            document.getElementById('confirmPwd').addEventListener('keyup', function () {
                var password = document.getElementById('password').value;
                console.log("pass:", password);
                var confirmPassword = this.value;
                var passwordMatchError = document.getElementById('passwordMatchError');
                console.log("ConfirmPass:", confirmPassword);

                if (password !== confirmPassword) {
                    passwordMatchError.style.display = 'block';
                } else {
                    passwordMatchError.style.display = 'none';
                }
            });
        });

        //Function to show the confirmation modal
        function showConfirmationModal() {
            $('#confirmationModal').modal('show');
        }

        // Handle form submission when "Yes" is clicked
        $('#confirmYes').click(function () {
            $('#confirmationModal').modal('hide'); // Hide the modal
            $('form').submit(); // Submit the form
        });

        // Attach the confirmation dialog to the Create button
        $(document).ready(function () {
            $('button[type="submit"]').click(function (e) {
                e.preventDefault(); // Prevent the default form submission
                showConfirmationModal(); // Show the confirmation modal
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            var signinForm = document.getElementById('signinForm');
            var signinButton = document.getElementById('signinButton');

            // Disable the button initially
            signinButton.disabled = true;

            // Add an event listener to check form validity on input
            signinForm.addEventListener('input', function () {
                signinButton.disabled = !signinForm.checkValidity();
            });

            // Add an event listener to handle form submission
            signinForm.addEventListener('submit', function (event) {
                // Prevent the default form submission
                event.preventDefault();

                // Check form validity before allowing submission
                if (signinForm.checkValidity()) {
                    // If the form is valid, you can enable the button and perform any other actions
                    signinButton.disabled = false;
                    signinButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';

                    // Optionally, you can trigger your confirmation modal or other actions here
                    showConfirmationModal();

                    // Now, you can submit the form programmatically if needed
                    // signinForm.submit();
                }
            });
        });


    </script>
</body>

